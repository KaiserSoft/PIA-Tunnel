#!/bin/bash
# script to create links to the pia scripts and set permissions

LANG=en_US.UTF-8
export LANG

#set file permissions as needed
chmod 0770 /pia
find /pia -type d -exec chmod 0770 {} \;
find /pia -type f -exec chmod 0660 {} \;


# the ping functions now require dig
if [ ! -f "/usr/bin/dig" ]; then
	apt-get -y install dnsutils > /dev/null
fi
# add php5-cli for pia-daemon 2.0
if [ ! -f "/usr/bin/php" ]; then
    apt-get -y install php5-cli php5-curl
fi
# add zip
if [ ! -f "/usr/bin/zip" ]; then
    apt-get -y install zip unzip
fi


#install Dante SOCKS 5 Proxy
if [ ! -f "/usr/sbin/sockd" ]; then

  #check for correct CPU architecture - can't get the above code to work so let's hack it
  CPU_type=`uname -m`
  if [ "$CPU_type" = "i686" ]; then
    cp /pia/extra_software/dante-1.4.1-bin.tar.xz /tmp/dante-1.4.1-bin.tar.xz

  elif [ "$CPU_type" = "armv6l" ] || [ "$CPU_type" = "armv7l" ]; then #WATCH OUT this is armv6L
    cp /pia/extra_software/dante-1.4.1-arm-bin.tar.xz /tmp/dante-1.4.1-bin.tar.xz

  else
    echo -e "[\e[1;31mfail\e[0m] "$(date +"%Y-%m-%d %H:%M:%S")\
      "- no precompiled package for your CPU architecture found ($CPU_type)"
  fi

  if [ -f /tmp/dante-1.4.1-bin.tar.xz ]; then
    xz -d /tmp/dante-1.4.1-bin.tar.xz ; tar -xf /tmp/dante-1.4.1-bin.tar -C /tmp/
    cp -r /tmp/dante-1.4.1-bin/* /usr/
    rm /tmp/dante-1.4.1-bin.tar ; rm -rf /tmp/dante-1.4.1-bin
  else
    echo -e "[\e[1;31mfail\e[0m] "$(date +"%Y-%m-%d %H:%M:%S")\
      "- SOCKS5 binaries where NOT setup! This feature will not work."
  fi

else
  #update existing dante - came after ARM release so no need to check right now
  DANTE_VERSION=`/usr/sbin/sockd -v | gawk -F" " '{print $2}'`
  if [ "$DANTE_VERSION" = "v1.4.0." ]; then
    if [ -f "/pia/extra_software/dante-1.4.1-bin.tar.xz" ]; then
      cp /pia/extra_software/dante-1.4.1-bin.tar.xz /tmp/
      xz -d /tmp/dante-1.4.1-bin.tar.xz ; tar -xf /tmp/dante-1.4.1-bin.tar -C /tmp/
      cp -r /tmp/dante-1.4.1-bin/* /usr/
      rm /tmp/dante-1.4.1-bin.tar ; rm -rf /tmp/dante-1.4.1-bin
    else
      echo -e "[\e[1;31mfail\e[0m] "$(date +"%Y-%m-%d %H:%M:%S")\
        "- dante-1.4.1-bin.tar.xz not found. Please run pia-update!"
    fi
  fi
fi


#install 3proxy SOCKS5
if [ ! -f "/usr/sbin/socks" ]; then

  #check for correct CPU architecture - can't get the above code to work so let's hack it
  CPU_type=`uname -m`
  if [ "$CPU_type" = "i686" ]; then
    mkdir -p /tmp/3proxy/
    cp /pia/extra_software/3proxy-0.7.1.2-socks-i686.tar.xz /tmp/3proxy/3proxy-0.7.1.2-socks.tar.xz

  elif [ "$CPU_type" = "armv6l" ] || [ "$CPU_type" = "armv7l" ]; then #WATCH OUT this is armv6L
    mkdir -p /tmp/3proxy/
    cp /pia/extra_software/3proxy-0.7.1.2-socks-arm.tar.xz /tmp/3proxy/3proxy-0.7.1.2-socks.tar.xz

  else
    echo -e "[\e[1;31mfail\e[0m] "$(date +"%Y-%m-%d %H:%M:%S")\
      "- no precompiled package for your CPU architecture found ($CPU_type)"
  fi

  if [ -f /tmp/3proxy/3proxy-0.7.1.2-socks.tar.xz ]; then
    xz -d /tmp/3proxy/3proxy-0.7.1.2-socks.tar.xz ; tar -xf /tmp/3proxy/3proxy-0.7.1.2-socks.tar -C /tmp/3proxy/
    cp -r /tmp/3proxy/socks /usr/sbin
    rm -rf /tmp/3proxy
  else
    echo -e "[\e[1;31mfail\e[0m] "$(date +"%Y-%m-%d %H:%M:%S")\
      "- SOCKS5 binaries where NOT setup! This feature will not work."
  fi
fi


#remove /bin/bash from sudoers
pos=`grep -n '/bin/bash,/sbin/shutdown' /etc/sudoers | gawk -F":" '{print $1}'`
if [ ! -z "$pos" ]; then
  sed -i /etc/sudoers -e "$pos"'s!\/bin\/bash,!!'
  if [ "$?" != "0" ]; then
    echo -e "[\e[1;31mfail\e[0m] "$(date +"%Y-%m-%d %H:%M:%S")\
      "- unable to remove bash entry from sudoers. you can fix this by getting the latest VM image."
  fi
fi


#create a fresh settings file
if [ ! -f "/pia/settings.conf" ]; then
	echo '#!/bin/bash' > '/pia/settings.conf'
	echo 'LANG=en_US.UTF-8' >> '/pia/settings.conf'
	echo 'export LANG' >> '/pia/settings.conf'
	echo '' >> '/pia/settings.conf'
	echo '' >> '/pia/settings.conf'
	echo '# interface and network settings' >> '/pia/settings.conf'
	echo '#####' >> '/pia/settings.conf'
	echo '# name of your external interface. this connects to the Internet/Router' >> '/pia/settings.conf'
	echo 'IF_EXT="eth0"' >> '/pia/settings.conf'
	echo '# name of your internal interface. this if for the private VM network' >> '/pia/settings.conf'
	echo 'IF_INT="eth1"' >> '/pia/settings.conf'
	echo '# name of your VPN interface' >> '/pia/settings.conf'
	echo 'IF_TUNNEL="tun0"' >> '/pia/settings.conf'
	echo '# IP of target computer for port forwarding - if supported by location' >> '/pia/settings.conf'
	echo 'FORWARD_IP="192.168.10.100"' >> '/pia/settings.conf'
    echo '# Enable/Disable forwarding yes/no' >> '/pia/settings.conf'
    echo 'FORWARD_PORT_ENABLED="no"' >> '/pia/settings.conf'
    echo '# Enable/Disable forwarding for public LAN yes/no' >> '/pia/settings.conf'
    echo 'FORWARD_PUBLIC_LAN="yes"' >> '/pia/settings.conf'
    echo '# Enable/Disable forwarding for private VM LAN yes/no' >> '/pia/settings.conf'
    echo 'FORWARD_VM_LAN="yes"' >> '/pia/settings.conf'
    echo '# Enable ssh UI on the following interfaces' >> '/pia/settings.conf'
    echo 'FIREWALL_IF_SSH[0]="eth0"' >> '/pia/settings.conf'
    echo '# Enable web on the following interfaces' >> '/pia/settings.conf'
    echo 'FIREWALL_IF_WEB[0]="eth0"' >> '/pia/settings.conf'
    echo 'FIREWALL_IF_WEB[1]="eth1"' >> '/pia/settings.conf'
	echo '' >> '/pia/settings.conf'
fi

FILES="pia-start pia-stop pia-status pia-update pia-settings"
FILES="$FILES pia-setup pia-forward  pia-prepare-ovpn pia-daemon"
for f in $FILES
do
	if [ -f "/bin/$f" ]; then
		rm "/bin/$f"
	fi
	ln -s "/pia/$f" "/bin/$f"
	chmod ug+x "/pia/$f"
done

#handle files in include, these don't get /bin/ links
FILES="fw-forward.sh fw-no-forward.sh build_ping_list.sh fix_settings.sh network-interfaces.sh"
FILES="$FILES network-restart.sh autostart autostart.sh dhcpd-reconfigure.sh dhcpd-start.sh log_fetch.sh"
FILES="$FILES dhcpd-stop.sh dhcpd-status.sh update_root.sh fw_get_forward_state.sh autostart_rebuild.sh"
FILES="$FILES sockd-dante-start.sh sockd-dante-status.sh sockd-dante-stop.sh sockd-dante-reconfigure.sh"
FILES="$FILES dhcpd-service.sh functions.sh  ping.sh ovpn_kill.sh"
FILES="$FILES sockd-3proxy-status.sh sockd-3proxy-start.sh sockd-3proxy-stop.sh"
FILES="$FILES socks-start.sh socks-stop.sh socks-status.sh"
for f in $FILES
do
	chmod ug+x "/pia/include/$f"
done

#reset-pia is special - ug+x but no /bin link
chmod ug+x "/pia/reset-pia"
chmod ug+x "/pia/system-update.sh"

#add missing (new) settings to settings.conf
/pia/include/fix_settings.sh

### add changes below this lines as settings.conf may not be upto date above



# move ip list from old to new location
if [ ! -f '/pia/ip_list.txt' ] && [ -f '/pia/cache/ip_list.txt' ]; then
  mv '/pia/cache/ip_list.txt' '/pia/ip_list.txt'
fi



#check ip cache
if [ ! -f '/pia/ip_list.txt' ]; then
	echo -e "[info] "$(date +"%Y-%m-%d %H:%M:%S")\
	  "- ip_list.txt does not exist - rebuilding!"
	echo -e "\tthis will take a couple of minutes...."
	/pia/include/build_ping_list.sh
    chown -R root.vpnvm /pia/ip_list.txt
    chmod 0660 /pia/ip_list.txt
fi


#update files in /var/www
cp -r /pia/htdocs/* /var/www
rm -f /var/www/README.txt
rm -f /var/www/monitor-windows.zip
cd /pia/client_scripts ; zip -r /var/www/monitor-windows.zip monitor-windows/ &> /dev/null
cp "/pia/docs/PIA-Tunnel Documentation.pdf" /var/www/pia-tunnel_documentation.pdf &> /dev/null
mkdir -p /var/www/docs/ ; cp -r "/pia/docs/HTML Manual/"* /var/www/docs/
chown -R www-data.www-data /var/www
find /var/www -type d -exec chmod 0750 {} \;
find /var/www -type f -exec chmod 0640 {} \;

# clear webUI update cache
rm -rf "/pia/cache/webui-update_status.txt"


# add "automatic update" cronjob - remove these soon
#crontab -l > /tmp/crontab.piaout
#ret=`grep -c "apt-get upgrade" /tmp/crontab.piaout`
#if [ $ret = 0 ]; then
#  echo '00 04 * * * apt-get update -y ; apt-get upgrade -y' >> '/tmp/crontab.piaout'
#  crontab /tmp/crontab.piaout
#  rm /tmp/crontab.piaout
#fi

# change "automatic update" to every 8 hours
crontab -l > /tmp/crontab.piaout
ret1=`grep -c "00 04 \* \* \* apt-get update -y ; apt-get upgrade -y" /tmp/crontab.piaout`
ret2=`grep -c "00 8/\* \* \* \* /pia/system-update.sh" /tmp/crontab.piaout`
if [ $ret1 = 1 ] && [ $ret2 = 0 ]; then
  pos=`grep -n '00 04 \* \* \* apt-get update -y' /tmp/crontab.piaout | gawk -F":" '{print $1}'`
  sed -i".tmp" "${pos}d" /tmp/crontab.piaout
  echo '00 8/* * * * /pia/system-update.sh' >> '/tmp/crontab.piaout'
  crontab /tmp/crontab.piaout
  rm /tmp/crontab.piaout
else
  #echo "already up to date"
  rm /tmp/crontab.piaout
fi


# move login.conf to login-pia.conf
if [ -f '/pia/login.conf' ]; then
  mv '/pia/login.conf' '/pia/login-pia.conf'
fi


# rebuild autostart.conf to apply new default values from update (pia-update runs pia-setup)
/pia/include/autostart_rebuild.sh &> /dev/null

if [ ! -d "/pia/cache/" ]; then
  mkdir /pia/cache/
  chown -R root.vpnvm /pia/cache/
  chmod 0770 /pia/cache/
fi


#ALWAYS RUN THIS LAST
chown -R root.vpnvm /pia
chmod 0770 /pia
chmod -R o-rwx /pia

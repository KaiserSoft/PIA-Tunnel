#!/bin/bash
# script to monitor the tunnel connection and terminate or restart it if it fails
LANG=en_US.UTF-8
export LANG
source '/pia/settings.conf'
source '/pia/include/functions.sh'


# How it works
# *) pia-start initiates the VPN connection
# *) pia-daemon is started when VPN is established. the script will send one ping every
     n seconds through the tunnel to check if the VPN is still up.
#       if the ping fails n times the tunnel is closed or restarted


# check for "stop" $1 which kills all pia-daemons
if [ "$1" = "stop" ]; then
  killall "pia-daemon"
fi



# generate a few IPs for the uptime functions
gen_ip_list 15


# run this when the user hits control_c
function control_c() {
  echo #or ^C will make it ugly
  echo -e "[info] "$(date +"%Y-%m-%d %H:%M:%S")\
	  "- stopping pia-daemon and closing open connections"
  /pia/pia-stop "quite"
  exit "$?"
}


#final check before the loop starts
PIA_UN=`sed -n '1p' /pia/login.conf`
if [ "$PIA_UN" = "your PIA account name on this line" ]; then
	echo
	echo "Please add your Private Internet Access account information"
	echo "to /pia/login.conf"
	echo "Try"
	echo -e "\tvi /pia/login.conf"
	echo "or"
	echo -e "\tnano /pia/login.conf"
	echo
	exit
fi
# this is the outer endless loop #
##################################
while true; do
	ping_host_new "vpn"
	vpn_up=$RET_PING_HOST
	if [ "$RET_PING_HOST" = "ERROR" ]; then
		#VPN connection has failed
		if [ "$VERBOSE" = "yes" ]; then
			echo -e "[info] "$(date +"%Y-%m-%d %H:%M:%S")\
				"- VPN appears to have failed"
		fi

		for (( x=1 ; x <= $FAIL_RETRY_VPN ; x++ ))
		do
			sleep $SLEEP_PING_RETEST
			ping_host_new "vpn"
			vpn_up=$RET_PING_HOST
			if [ "$RET_PING_HOST" = "OK" ]; then
				if [ "$VERBOSE" = "yes" ]; then
					echo -e "[info] "$(date +"%Y-%m-%d %H:%M:%S")\
						"- VPN ping worked this time...."
				fi
				break
			else
				if [ "$VERBOSE" = "yes" ]; then
					echo -e "[info] "$(date +"%Y-%m-%d %H:%M:%S")\
						"- VPN ping failed $x of $FAIL_RETRY_VPN"
				fi
			fi
		done

	fi
	if [ "$vpn_up" = "ERROR" ]; then
	  #VPN has completely failed.
	  if [ "$VERBOSE_DEBUG" = "yes" ]; then
	    echo -e "[deb ] "$(date +"%Y-%m-%d %H:%M:%S")\
		  "- VPN has failed, about to stop all FORWARDING!"
	  fi
	  # disable port forwarding and reset the firewall until this is fixed
	  /pia/pia-forward stop quite
	fi
	#end of VPN test

        #check that the firewall rules are as they should be
        if [ "$vpn_up" = "OK" ]; then
            check_forward_state
            if [ "$RET_FORWARD_STATE" = 'OFF' ]; then
                if [ "$FORWARD_PUBLIC_LAN" = 'yes' ] || [ "$FORWARD_VM_LAN" = 'yes' ]; then
                    echo -e "[info] "$(date +"%Y-%m-%d %H:%M:%S")\
                    "- FW not enabled but it should be. restarting FW!"
                    /pia/pia-forward start quite
                fi

            else
                if [ "$FORWARD_PUBLIC_LAN" = 'no' ] && [ "$FORWARD_VM_LAN" = 'no' ]; then
                    echo -e "[info] "$(date +"%Y-%m-%d %H:%M:%S")\
                    "- FW disabled but running. stopping FW!"
                    /pia/pia-forward stop quite
                fi
            fi
        fi

	#check if the Internet is up but only if the VPN is down because
	# the firewall is configured to block traffic over eth0 while tun0 is active
	if [ "$vpn_up" = "ERROR" ]; then
            ping_host_new "internet"
        fi
        if [ "$RET_PING_HOST" = "ERROR" ] && [ "$vpn_up" = "ERROR" ]; then
		RAN_FORWARD_FIX="no"
		LOOP_TIMEOUT=1
		while true; do

			ping_host_new "internet"
			if [ "$RET_PING_HOST" = "OK" ]; then
				#internet works, keep going
				if [ "$VERBOSE" = "yes" ]; then
					echo -e "[info] "$(date +"%Y-%m-%d %H:%M:%S")\
						"- Internet is back up after $LOOP_TIMEOUT of $FAIL_RETRY_INTERNET attempts"
				fi
				break

			else
				if [ "$RAN_FORWARD_FIX" = "no" ]; then
					#only do this once per internet connection failure
					echo -e "[\e[1;33mwarn\e[0m] "$(date +"%Y-%m-%d %H:%M:%S")\
						"- Internet connection appears to be down"
					echo -e "\trunning ${bold}pia-forward fix${normal}"
					RAN_FORWARD_FIX="yes"
					/pia/pia-forward fix quite
				fi
			fi


			#ping loop timeout
			if [ "$LOOP_TIMEOUT" -gt $FAIL_RETRY_INTERNET ]; then
				echo -e "[\e[1;33mwarn\e[0m] "$(date +"%Y-%m-%d %H:%M:%S")\
					"- forwarding disabled until the VPN is back up."
				echo -e "[\e[1;31mfail\e[0m] "$(date +"%Y-%m-%d %H:%M:%S")\
					"- Internet is DOWN! Recheck in $SLEEP_INTERNET_DOWN seconds"
                                rm -f "/pia/cache/session.log"
				/pia/pia-forward stop quite
				sleep $SLEEP_INTERNET_DOWN

				#restarting pia-daemon because there is no goto :(
				# will have to rewrite this script as a later timer
				/pia/pia-daemon shutup
				exit
				break

			else
				if [ "$VERBOSE" = "yes" ]; then
					echo -e "[info] "$(date +"%Y-%m-%d %H:%M:%S")\
						"- Internet failure $LOOP_TIMEOUT of $FAIL_RETRY_INTERNET"
				fi
				sleep $SLEEP_PING_RETEST
				LOOP_TIMEOUT=$(($LOOP_TIMEOUT + 1))
			fi
		done
	else
		if [ "$vpn_up" = "ERROR" ]; then
			if [ "$VERBOSE" = "yes" ]; then
				echo -e "[info] "$(date +"%Y-%m-%d %H:%M:%S")\
					"- Internet ist UP"
			fi
		fi
	fi
	#internet check ends here



	# do something if the VPN is broken and Internet is up
	if [ "$vpn_up" = "ERROR" ]; then
		#connection is busted!
		if [ "$FAIL_ACTION" = "failover" ]; then
			echo -e "[\e[1;33mwarn\e[0m] "$(date +"%Y-%m-%d %H:%M:%S")\
				"- VPN has failed - switching to backup"

			#initiate a VPN switch
			switch_vpn

		else
			/pia/pia-stop quite
			/pia/pia-forward stop quite
			echo -e "[\e[1;31mfail\e[0m] "$(date +"%Y-%m-%d %H:%M:%S")\
				"- VPN has failed - connection terminated and forwarding disabled!"
			exit
		fi
	fi


	# create and or maintain the status cache file
	maintain_status_cache '/pia/cache/status.txt'
	if [ "$?" != "0" ]; then
	  echo -e "[\e[1;31mfail\e[0m] "$(date +"%Y-%m-%d %H:%M:%S")\
	    "- error during status cache maintenance\n\tpia-status will not work"
	  exit
	fi

	if [ "$VERBOSE" = "yes" ]; then
	  vpn_port=`cat "/pia/cache/status.txt" | grep "VPNPORT" | gawk -F":" '{print $2}'`
	  vpn_ip=`cat "/pia/cache/status.txt" | grep "VPNIP" | gawk -F":" '{print $2}'`
	  if [ "$vpn_port" = "none" ]; then
	    echo -e "[info] "$(date +"%Y-%m-%d %H:%M:%S")\
		    "- VPN is UP - VPN IP: $vpn_ip Port: no support"
	  else
	    echo -e "[info] "$(date +"%Y-%m-%d %H:%M:%S")\
		    "- VPN is UP - VPN IP: $vpn_ip Port: $vpn_port"
	  fi
	fi

	# trap keyboard interrupt (control-c)
	trap control_c SIGINT

	sleep $SLEEP_MAIN_LOOP

        #refresh settings after each run
        source '/pia/settings.conf'

	if [ "$VERBOSE_DEBUG" = "yes" ]; then
	  echo #print empty lines in debug mode to prevent cross eyes :)
	  echo #print empty lines in debug mode to prevent cross eyes :)
	fi

	#call self for now to allow auto update during dev
	#/pia/pia-daemon shutup
	#exit
done
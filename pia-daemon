#!/bin/bash
# script to monitor the tunnel connection and terminate or restart it if it fails
LANG=en_US.UTF-8
export LANG
source '/pia/settings.conf'
source '/pia/include/functions.inc'

if [ ! "$1" = "shutup" ]; then
	echo -e "[\e[1;33m warn \e[0m] "$(date +"%Y-%m-%d %H:%M:%S")\
		"- pia-daemon is EXPERIMENTAL!"
fi


# How it works
# *) pia-start initiates a connection
# *) this daemon script is startet which will send one ping every n seconds through the tunnel
# 	if the ping fails n times the tunnel is closed or restartet

# list of VPN connections to use, the first is awlays the primary
MYVPN[0]="Germany"
MYVPN[1]="Sweden"
MYVPN[2]="Romania"

# set action when VPN fails: terminate | failover
FAIL_ACTION="failover"
FAIL_RETRY_VPN=4
FAIL_RETRY_INTERNET=3
FAIL_RETRY_DELAY=1


# setting verbose to yes will print status notification after each check. any other settings for "background mode"
VERBOSE="yes"
VERBOSE_DEBUG="no"

# time in seconds to wait before rechecking a down Internet connection
# each run takes a few seconds to complete so don't go too low!
# default 320 (5 minutes)
SLEEP_INTERNET_DOWN=30

# time in seconds to wait before attempting to ping a resource again
# default 4
SLEEP_PING_RETEST=4

# time in seconds between retries when none of the PIA Gateways can be reached
# default 320 (5 minutes)
SLEEP_RECONNECT_ERROR=30

# time (seconds) in between "uptime" checks. every check will send a few pings
# to some server so please don't flood them or they may block you
# default 30
SLEEP_MAIN_LOOP=30





# generate a few IPs for the uptime functions
gen_ip_list 15



#final check before the loop starts
PIA_UN=`sed -n '1p' /pia/login.conf`
if [ "$PIA_UN" = "your PIA account name on this line" ]; then
	echo
	echo "Please add your Private Internet Access account information"
	echo "to /pia/login.conf"
	echo "Try"
	echo -e "\tvi /pia/login.conf"
	echo "or"
	echo -e "\tnano /pia/login.conf"
	echo
	exit
fi
# this is the outer endless loop #
##################################
while true; do	
	ping_host "vpn"
	vpn_up=$RET_PING_HOST
	if [ "$RET_PING_HOST" = "ERROR" ]; then
		#VPN connection has failed
		if [ "$VERBOSE" = "yes" ]; then
			echo -e "[ info ] "$(date +"%Y-%m-%d %H:%M:%S")\
				"- VPN appears to have failed"
		fi
		for (( x=1 ; x <= $FAIL_RETRY_VPN ; x++ ))
		do
			sleep $SLEEP_PING_RETEST
			ping_host "vpn"
			vpn_up=$RET_PING_HOST
			if [ "$RET_PING_HOST" = "OK" ]; then
				if [ "$VERBOSE" = "yes" ]; then
					echo -e "[ info ] "$(date +"%Y-%m-%d %H:%M:%S")\
						"- VPN ping worked this time...."
				fi
				break
			else
				if [ "$VERBOSE" = "yes" ]; then
					echo -e "[ info ] "$(date +"%Y-%m-%d %H:%M:%S")\
						"- VPN ping failed $x of $FAIL_RETRY_VPN"
				fi
			fi
		done
		
		#VPN has completely failed. disable port forwarding and reset the firewall until this is fixed
		/pia/pia-forward stop quite
		
	else
		if [ "$VERBOSE_DEBUG" = "yes" ]; then
			echo -e "[ info ] "$(date +"%Y-%m-%d %H:%M:%S")\
				"- VPN is UP"
		fi
	fi
	#end of VPN test

	
	
	#check if the Internet is up but only if the VPN is down because
	# the firewall is configured to block traffic over eth0 while tun0 is active
	ping_host "internet"
	if [ "$RET_PING_HOST" = "ERROR" ] && [ "$vpn_up" = "ERROR" ]; then
		RAN_FORWARD_FIX="no"
		LOOP_TIMEOUT=1
		while true; do
			
			ping_host "internet"
			if [ "$RET_PING_HOST" = "OK" ]; then
				#internet works, keep going
				if [ "$VERBOSE" = "yes" ]; then
					echo -e "[ info ] "$(date +"%Y-%m-%d %H:%M:%S")\
						"- Internet is back up after $LOOP_TIMEOUT of 5 attempts"
				fi
				break;
				
			else
				if [ "$RAN_FORWARD_FIX" = "no" ]; then
					#only do this once per internet connection failure
					echo -e "[\e[1;33m warn \e[0m] "$(date +"%Y-%m-%d %H:%M:%S")\
						"- Internet connection appears to be down"
					echo -e "\trunning pia-forward fix"
					RAN_FORWARD_FIX="yes"
					/pia/pia-forward fix quite
				fi
			fi
			

			#ping loop timeout
			if [ "$LOOP_TIMEOUT" -gt $FAIL_RETRY_INTERNET ]; then
				echo -e "[\e[1;33m warn \e[0m] "$(date +"%Y-%m-%d %H:%M:%S")\
					"forwarding disabled until the VPN is back up."
				echo -e "[\e[1;31m error \e[0m] "$(date +"%Y-%m-%d %H:%M:%S")\
					"- Internet is DOWN! Recheck in $SLEEP_INTERNET_DOWN seconds"
				/pia/pia-forward stop quite
				sleep $SLEEP_INTERNET_DOWN
				
				#restarting pia-daemon
				/pia/pia-daemon shutup
				exit
				break
				
			else
				if [ "$VERBOSE" = "yes" ]; then
					echo -e "[ info ] "$(date +"%Y-%m-%d %H:%M:%S")\
						"- Internet failure $LOOP_TIMEOUT of $FAIL_RETRY_INTERNET"
				fi
				sleep $SLEEP_PING_RETEST
				LOOP_TIMEOUT=$(($LOOP_TIMEOUT + 1))
			fi	
		done
	else
		if [ "$vpn_up" = "ERROR" ]; then
			if [ "$VERBOSE" = "yes" ]; then
				echo -e "[ info ] "$(date +"%Y-%m-%d %H:%M:%S")\
					"- Internet ist UP"
			fi
		fi
	fi
	#internet check ends here
  
  

	# do something if the VPN is broken and Internet is up
	if [ "$vpn_up" = "ERROR" ]; then
		#connection is busted!
		if [ "$FAIL_ACTION" = "failover" ]; then
			echo -e "[\e[1;33m warn \e[0m] "$(date +"%Y-%m-%d %H:%M:%S")\
				"- VPN has failed - switching to backup."
			
			#initiate a VPN switch
			switch_vpn

		else
			/pia/pia-stop quite
			/pia/pia-forward stop quite
			echo -e "[\e[1;31m error \e[0m] "$(date +"%Y-%m-%d %H:%M:%S")\
				"- VPN has failed - connection terminated and forwarding disabled!"
			exit
		fi
	fi
  
  
  
	if [ "$VERBOSE" = "yes" ]; then
		echo -e "[\e[1;32m ok \e[0m] "$(date +"%Y-%m-%d %H:%M:%S")\
			"- VPN is UP - next check in $SLEEP_MAIN_LOOP seconds..."
	fi
	sleep $SLEEP_MAIN_LOOP
	
	#call self for now to allow auto update during dev
	/pia/pia-daemon shutup
	exit
done
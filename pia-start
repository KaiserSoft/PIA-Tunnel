#!/bin/bash
# starts a specific VPN connection
# The argument must be the name of the .ovpn file without .ovpn
#	./start-vpn Germany
# get a list of connection names with ./start-vpn list

LANG=en_US.UTF-8
export LANG
source '/usr/local/pia/settings.conf'
source '/usr/local/pia/include/functions.sh'
if [ "$OS_TYPE" = "FreeBSD" ]; then
  source '/usr/local/pia/include/functions-freebsd.sh'
fi

FAIL_RETRY_INTERNET=3
SLEEP_PING_RETEST=4

# generate a few IPs for the uptime functions
gen_ip_list

# remove old status.txt
rm -f '/usr/local/pia/cache/status.txt' 2>/dev/null




#show usage
if [ "$1" = "list" ] || [ $# -eq 0 ] || [ "$1" = "--help" ]; then
	LIST1=`ls -I "ca.crt" -1 /usr/local/pia/ovpn/pia/ | gawk -F"." '{print $1}'`
    LIST2=`ls -1 /usr/local/pia/ovpn/frootvpn/ | gawk -F"." '{print $1}'`

	echo
	echo "Listing available VPN connections:"
	echo "$LIST1"
	echo "$LIST2"
	echo
	echo "Examples:"
	echo -e "\tpia-start PIAtcp/Germany"
	echo -e "\tpia-start \"PIAudp/UK London\""
	exit
fi

# passed as command line argument
filename="$1"


# network status at before VPN is started
echo -e "\n\n" >> /usr/local/pia/cache/network.log
echo $(date +"%Y-%m-%d %H:%M:%S")\
			"running pia-start and these are the network settings before the VPN" >> /usr/local/pia/cache/network.log
ifconfig tun0 &>> /usr/local/pia/cache/network.log
ifconfig em0 &>> /usr/local/pia/cache/network.log
ifconfig em1 &>> /usr/local/pia/cache/network.log
netstat -rn &>> /usr/local/pia/cache/network.log



#execute if .ovpn file exists with name passed
if [ -f "/usr/local/pia/ovpn/$filename.ovpn" ]; then
	# check for default username and exit
    check_default_username

    #check if openvpn is running
    check_openvpn_running
    if [ ! "$RET_CHK_OPENVPN" = "down" ] ; then
      echo -e "[info] "$(date +"%Y-%m-%d %H:%M:%S")\
          "- VPN active, attempting to end current connection"
      VPNstop
    fi


    #check if tun0 is already up
    check_tun0_up
    if [ ! "$RET_CHK_IF_TUN0" = "down" ]; then
      echo -e "[\e[1;31mfail\e[0m] "$(date +"%Y-%m-%d %H:%M:%S")\
          "- tun0 is still active - refusing to continue"
      exit 99
    fi


    #get the provider / directory name
    VPNprovider=`echo "$filename" | gawk -F"/" '{print $1}'`

    #start openVPN session
    if [ -f "/usr/local/pia/ovpn/$filename.ovpn" ]; then
      echo -e "[info] "$(date +"%Y-%m-%d %H:%M:%S")\
          "- establishing a VPN connection to $filename."
      echo -e "\tsee ${bold}/usr/local/pia/cache/session.log${normal} for details"
      echo $(date +"%a %b %d %H:%M:%S %Y")" connecting to $filename" > /usr/local/pia/cache/session.log

      echo "$VPNprovider" > /usr/local/pia/cache/provider.txt
      openvpn "/usr/local/pia/ovpn/$filename.ovpn" &>> /usr/local/pia/cache/session.log &

    else
      echo -e "[\e[1;31mfail\e[0m] "$(date +"%Y-%m-%d %H:%M:%S")\
          "- specified file not found in pia-start - /usr/local/pia/ovpn/$filename.ovpn"
      echo -e "[\e[1;31mfail\e[0m] "$(date +"%Y-%m-%d %H:%M:%S")\
          "- terminating...."
      # remove old status.txt
      rm -f '/usr/local/pia/cache/status.txt' 2>/dev/null
      rm -f '/usr/local/pia/cache/php_pia-start.log' 2>/dev/null
      exit 1
    fi


	# start the FW script once the VPN is up and running
	LOOP_PROTECT=0
	while true; do
	  ping_host_new "vpn" "keep"
	  if [ "$RET_PING_HOST" = "OK" ]; then
	    # show connection data
	    echo_conn_established $filename

	    #start firewall and enable forwarding
	    /usr/local/pia/pia-forward start quite

        #time to (re)start the proxy
        if [ "${SOCKS_EXT_ENABLED}" = 'yes' ] || [ "${SOCKS_INT_ENABLED}" = 'yes' ]; then
          /usr/local/pia/include/socks-start.sh
        fi

        # start torrent daemon
        if [ "${TRANSMISSION_ENABLED}" = 'yes' ]; then
            /usr/local/pia/include/transmission-start.sh
        fi

        # keep VPN up with daemon?
        if [ "$1" = "daemon" ]; then
          sleep 5 #give everything a few seconds to settle
          echo -e "[info] "$(date +"%Y-%m-%d %H:%M:%S")\
            "- starting pia-daemon with nohup"
          killall pia-daemon &> /dev/null
          #screen -d -m /usr/local/pia/pia-daemon
          nohup /usr/local/pia/pia-daemon &> /usr/local/pia/cache/pia-daemon.log &
        fi
	    break
	  fi


	  #endless loop protect, about 30 seconds
	  if [ "$LOOP_PROTECT" -eq 30 ]; then
		echo -e "[\e[1;31mfail\e[0m] "$(date +"%Y-%m-%d %H:%M:%S")\
			"- VPN connection fail - please check /usr/local/pia/cache/session.log for details."
	    killall openvpn 2>/dev/null
        mv /usr/local/pia/cache/session.log /usr/local/pia/cache/session.old.log
        mv '/usr/local/pia/cache/php_pia-start.log' '/usr/local/pia/cache/php_pia-start.lastfail.log' 2>/dev/null
	    /usr/local/pia/pia-forward stop quite
	    exit
	  else
		sleep 1
		LOOP_PROTECT=$(($LOOP_PROTECT + 1))
	  fi
	done
else
  echo -e "[info] "$(date +"%Y-%m-%d %H:%M:%S")\
	  "- no connection with name $filename."
  echo -e "\ttry ${bold}pia-start list${normal} for a list of connections."
  exit 1
fi


echo -e "\n\n" >> /usr/local/pia/cache/network.log
echo $(date +"%Y-%m-%d %H:%M:%S")\
			"running pia-start and these are the network settings after the VPN is connected" >> /usr/local/pia/cache/network.log
ifconfig tun0 &>> /usr/local/pia/cache/network.log
ifconfig em0 &>> /usr/local/pia/cache/network.log
ifconfig em1 &>> /usr/local/pia/cache/network.log
netstat -rn &>> /usr/local/pia/cache/network.log
echo -e "\n\n" >> /usr/local/pia/cache/network.log

#!/bin/bash
# starts a specific VPN connection
# The argument must be the name of the .ovpn file without .ovpn
#	./start-vpn Germany
# get a list of connection names with ./start-vpn list

LANG=en_US.UTF-8
export LANG
source '/pia/settings.conf'
source '/pia/include/functions.sh'
FAIL_RETRY_INTERNET=3
SLEEP_PING_RETEST=4

# generate a few IPs for the uptime functions
gen_ip_list

# remove old status.txt
rm -f '/pia/cache/status.txt' 2>/dev/null




#show usage
if [ "$1" = "list" ] || [ $# -eq 0 ] || [ "$1" = "--help" ]; then
	LIST1=`ls -I "ca.crt" -1 /pia/ovpn/pia/ | gawk -F"." '{print $1}'`
    LIST2=`ls -1 /pia/ovpn/frootvpn/ | gawk -F"." '{print $1}'`

	echo
	echo "Listing available VPN connections:"
	echo "$LIST1"
	echo "$LIST2"
	echo
	echo "Examples:"
	echo -e "\tpia-start Germany"
	echo -e "\tpia-start \"UK London\""
	exit
fi

# passed as command line argument
filename="$1"

# check if this is a "daemon" run
if [ "$1" = "daemon" ]; then
	# select the first connection from the failover array
	filename="${MYVPN[0]}"
fi

#execute if .ovpn file exists with name passed
if [ -f "/pia/ovpn/$filename.ovpn" ]; then
	# check for default username and exit
    check_default_username


	#see if we have a tunnel open
	ping_host_new "vpn" "quick" "keep"
	if [ "$RET_PING_HOST" = "OK" ]; then
		echo -e "[info] "$(date +"%Y-%m-%d %H:%M:%S")\
			"- closing current VPN tunnel"
		/pia/pia-stop quite
	else
		#set iptables to something save until the tunnel is set up
		/pia/pia-forward stop quite
	fi

	#ensure internet works before going further
	check_repair_internet


    #get the provider / directory name
    VPNprovider=`echo "$filename" | gawk -F"/" '{print $1}'`

    #start openVPN session
    if [ -f "/pia/ovpn/$filename.ovpn" ]; then
      echo -e "[info] "$(date +"%Y-%m-%d %H:%M:%S")\
          "- establishing a VPN connection to $filename."
      echo -e "\tsee ${bold}/pia/cache/session.log${normal} for details"
      echo $(date +"%a %b %d %H:%M:%S %Y")" connecting to $filename" > /pia/cache/session.log

      echo "$VPNprovider" > /pia/cache/provider.txt
      openvpn "/pia/ovpn/$filename.ovpn" &>> /pia/cache/session.log &

    else
      echo -e "[\e[1;31mfail\e[0m] "$(date +"%Y-%m-%d %H:%M:%S")\
          "- specified file not found in pia-start - /pia/ovpn/$filename.ovpn"
      echo -e "[\e[1;31mfail\e[0m] "$(date +"%Y-%m-%d %H:%M:%S")\
          "- terminating...."
      # remove old status.txt
      rm -f '/pia/cache/status.txt' 2>/dev/null
      rm -f '/pia/cache/php_pia-start.log' 2>/dev/null
      exit 1
    fi




	# start the FW script once the VPN is up and running
	LOOP_PROTECT=0
	while true; do
	  ping_host_new "vpn" "keep"
	  if [ "$RET_PING_HOST" = "OK" ]; then
	    # show connection data
	    echo_conn_established $filename

	    #start firewall and enable forwarding
	    /pia/pia-forward start quite

        #time to (re)start the proxy
        if [ "${SOCKS_EXT_ENABLED}" = 'yes' ] || [ "${SOCKS_INT_ENABLED}" = 'yes' ]; then
          /pia/include/socks-start.sh
        fi

        # start torrent daemon
        if [ "${TRANSMISSION_ENABLED}" = 'yes' ]; then
            /pia/include/transmission-start.sh
        fi

        # keep VPN up with daemon?
        if [ "$1" = "daemon" ]; then
          sleep 5 #give everything a few seconds to settle
          echo -e "[info] "$(date +"%Y-%m-%d %H:%M:%S")\
            "- starting pia-daemon with nohup"
          killall pia-daemon &> /dev/null
          #screen -d -m /pia/pia-daemon
          nohup /pia/pia-daemon &> /pia/cache/pia-daemon.log &
        fi
	    break
	  fi


	  #endless loop protect, about 30 seconds
	  if [ "$LOOP_PROTECT" -eq 30 ]; then
		echo -e "[\e[1;31mfail\e[0m] "$(date +"%Y-%m-%d %H:%M:%S")\
			"- VPN connection fail - please check /pia/cache/session.log for details."
	    killall openvpn 2>/dev/null
        mv /pia/cache/session.log /pia/cache/session.old.log
        mv '/pia/cache/php_pia-start.log' '/pia/cache/php_pia-start.lastfail.log' 2>/dev/null
	    /pia/pia-forward stop quite
	    exit
	  else
		sleep 1
		LOOP_PROTECT=$(($LOOP_PROTECT + 1))
	  fi
	done
else
  echo -e "[info] "$(date +"%Y-%m-%d %H:%M:%S")\
	  "- no connection with name $filename."
  echo -e "\ttry ${bold}pia-start list${normal} for a list of connections."
  exit 1
fi